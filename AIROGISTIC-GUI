import tkinter as tk
from tkinter import *
from tkinter import filedialog
from tkinter import messagebox
import json
import mysql.connector
from bs4 import BeautifulSoup as soup
import requests
import re
import mysql.connector
from sqlalchemy import create_engine
import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.express as px
import pandas as pd
from math import sin, cos, sqrt, atan2, radians


LARGE_FONT= ("Verdana", 12)
class holdy_boi(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        container = tk.Frame(self)

        container.pack(side="top", fill="both", expand=True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}

        for F in (StartPage, PageOne, PageTwo):
            frame = F(container, self)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)

    def show_frame(self, cont):
        frame = self.frames[cont]



        frame.tkraise()
class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self,parent)

        image = tk.PhotoImage(file=r"C:\Users\mxr29\Desktop\School\Fall_2020\GIA\SD2\VIMFF-parallax-mountains.gif")

        label = Label(image=image)
        label.image = image  # keep a reference!
        label.pack()
        label.place(x=-2.5, y=400)


        global T
        T = tk.Text( height=1, width=40,font =("Verdana", 8))
        T.pack()
        T.place(x=8,y=105)




        button3 = tk.Button(self, text="Load File",
                            command=lambda: self.load_file(), bg = '#d1d1e8')
        button3.pack()
        button3.place(x=120, y=70)



        button5 = tk.Button(self, text="Run",
                            command=lambda: self.reformat(),bg='#7691cb', fg='black')
        button5.pack()
        button5.place(x=130, y=220)


    def load_file(self):
        global string_name
        global fname
        T.delete('1.0', END)
        fname = tk.filedialog.askopenfile(mode='rb', title='Choose a file')
        string_name= str(fname)
        string_name = string_name.split('name=')
        string_name = string_name[1].strip('>')
        string_name = string_name.strip('\'')
        T.insert(tk.END, string_name  )




    def reformat(self):

        bool1 = False
        bool2 = False
        bool3 = True
        try:
            print(T.get("1.0", "end-1c"))
            bool1 = True

        except NameError:
            tk.messagebox.showerror(title='Error', message= 'Input File Needed')


        if bool1 == True :
            print('Reformatting Data...\nDepending on size may take several minutes...')

            file = T.get("1.0", "end-1c")

            try:
                with open(file,
                          'r') as json_file:
                    data = json.load(json_file)
                    corrid_kml = []
                    for i in range(len(data['mission']['items'])):
                        corrid_kml.append(str(data['mission']['items'][i]['params'][4]) + " " + str(
                            data['mission']['items'][i]['params'][5]))
            except:
                f = open(file, "r")
                text = str(f.read())
                text = text.split('<coordinates>')
                text = text[1].split('</coordinates>')
                text = text[0]
                text = text.splitlines()
                corrid_kml = []

                for i in range(len(text)):
                    hold = text[i].split(',')
                    corrid_hold = hold[1] + " " + hold[0]
                    corrid_kml.append(corrid_hold)


            mydb = mysql.connector.connect(
                host="192.168.1.117",
                user="root",
                password="password",
                database="weather",

            )

            df = pd.read_sql('SELECT * FROM weather_state', con=mydb)
            print(df)

            mydb.close()

            data_link = 'http://www.findu.com/cgi-bin/near.cgi?call=FW0637'
            data_page = requests.get(data_link)
            page_soup_data = soup(data_page.text, 'html.parser')
            data_info = page_soup_data.find_all('tr')
            text = data_info[1].get_text()
            text = str(text)
            text = text.splitlines()
            node = []
            lat = []
            lng = []
            corr = []
            node_kml = []
            binary_temp = []
            for i in range(35, 85):
                hold = text[i].split(' *')
                node_hold = hold[0]
                node_hold = node_hold.strip(" ")
                node.append(node_hold)
                hold2 = re.split(r'(\s\d\d+)', text[i])
                hold2 = hold2[1] + hold2[2]
                hold2 = hold2.split(" ")
                corr.append(hold2[1] + " " + hold2[2][:-4])
            index_count = 1
            index = []
            node_list = []
            for i in range(len(df)):
                node_list.append(df['node'].iloc[i])

            node_dic = dict(zip(node, corr))
            print(node_dic)
            keep_list = []
            kml_lat_keep = []
            kml_lng_keep = []
            go = []
            R = 6373.0
            for i in range(len(corrid_kml)):
                # for i in range(0,1):
                distance = 1000000007
                kml = corrid_kml[i].split(' ')
                kml_lat = (float(kml[0]))
                kml_lng = (float(kml[1]))
                if kml_lat != 0 and kml_lng != 0:
                    go.append('Index')
                    index.append(index_count)
                    kml_lat_keep.append(kml_lat)
                    kml_lng_keep.append(kml_lng)
                    index_count += 1
                node_keep = 'hold'
                kml_lat = radians(float(kml[0]))
                kml_lng = radians(float(kml[1]))
                for j in range(len(node)):
                    # for j in range (0,8):
                    if kml_lat and kml_lng != '0':
                        node_corrd = node_dic[node[j]]
                        node_corrd = node_corrd.split(" ")
                        node_lat = radians(float(node_corrd[0]))
                        node_lng = radians(float(node_corrd[1]))
                        dlon = node_lng - kml_lng
                        dlat = node_lat - kml_lat
                        a = sin(dlat / 2) ** 2 + cos(kml_lat) * cos(node_lat) * sin(dlon / 2) ** 2
                        c = 2 * atan2(sqrt(a), sqrt(1 - a))
                        distance_hold = R * c
                        if distance_hold < distance and node[j] in node_list:
                            # if distance_hold < distance:

                            distance = distance_hold

                            node_keep = node[j]

                keep_list.append(node_keep)
            print(keep_list)
            #

            binary = []
            for i in range(len(df)):
                if df['node'].iloc[i] in keep_list:

                    binary.append(1)

                else:
                    binary.append(0)
            df['binary'] = binary
            print(df)
            df = df[df['binary'] == 1]
            df.drop(['binary'], axis=1)
            lat_keep = []
            lng_keep = []
            for i in range(len(df)):
                node_corrd = node_dic[df['node'].iloc[i]]
                node_corrd = node_corrd.split(" ")
                lat_keep.append(float(node_corrd[0]))
                lng_keep.append(float(node_corrd[1]))
            df['lat'] = lat_keep
            df['lng'] = lng_keep
            print(df)

            mydb = create_engine(

                "mysql+pymysql://root:password@192.168.1.117/weather",

            )
            dfkml = pd.DataFrame(list(zip(index, kml_lat_keep, kml_lng_keep, go)),
                                 columns=['node', 'lat', 'lng', 'Go_No_Go'])
            df.to_sql(con=mydb, name='dashboard_test', if_exists='replace', index=False)
            external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

            app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

            colors = {
                'background': '#111111',
                'text': '#2af5e2 '
            }

            # assume you have a "long-form" data frame
            # see https://plotly.com/python/px-arguments/ for more options

            df.dropna(axis=0, how='all', inplace=True)
            dfkml.dropna(axis=0, how='all', inplace=True)
            df.drop_duplicates(subset=['node'], keep='last', inplace=True)
            check = 'Pass'
            node_fail = "Failure Nodes: "
            binary_temp = []
            for i in range(len(df)):
                if (df['temp'].iloc[i] >= 100 and df['temp'].iloc[i] <= 114) or (df['temp'].iloc[i] <= 40 and df['temp'].iloc[i] >=21):
                    binary_temp.append('Caution')
                    check = 'Caution'
                    if node_fail == "Failure Nodes: ":
                        node_fail = node_fail + str(df['node'].iloc[i])
                    else:
                        node_fail = node_fail + "," + str(df['node'].iloc[i])
                if df['temp'].iloc[i] >=115 or df['temp'].iloc[i] < 21 :
                    binary_temp.append('Fail')
                    check = 'Fail'
                    if node_fail == "Failure Nodes: ":
                        node_fail = node_fail + str(df['node'].iloc[i])
                    else:
                        node_fail = node_fail + "," + str(df['node'].iloc[i])
                elif df['temp'].iloc[i] < 100:
                    binary_temp.append('Pass')
            df['binary_temp'] = binary_temp

            binary_wind = []
            for i in range(len(df)):
                if df['wind_speed'].iloc[i] >= 15 and df['wind_speed'].iloc[i] <19 :
                    binary_wind.append('Caution')
                    check = 'Caution'
                    if df['node'].iloc[i] not in node_fail:
                        node_fail = node_fail + "," + str(df['node'].iloc[i])
                if df['wind_speed'].iloc[i] > 19:
                    binary_wind.append('Fail')
                    check = 'Fail'
                    if df['node'].iloc[i] not in node_fail:
                        node_fail = node_fail + "," + str(df['node'].iloc[i])
                elif  df['wind_speed'].iloc[i] < 15   :
                    binary_wind.append('Pass')
            df['binary_wind'] = binary_wind

            binary_rain = []
            for i in range(len(df)):
                if df['rain_1'].iloc[i] > 5:
                    binary_rain.append('Fail')
                    check = 'Fail'
                    if df['node'].iloc[i] not in node_fail:
                        node_fail = node_fail + "," + str(df['node'].iloc[i])
                else:
                    binary_rain.append('Pass')
            df['binary_rain'] = binary_rain
            if check == 'Pass':
                color_check = '#40da16'
            elif check == 'Fail':
                color_check = '#da1616'
            else:
                color_check = '#FFC300'
            if node_fail == "Failure Nodes: ":
                node_fail = node_fail + 'NONE'
            Go_No_GO = []
            for i in range(len(df)):
                 list_hold = []
                 list_hold.append(df['binary_rain'].iloc[i])
                 list_hold.append(df['binary_temp'].iloc[i])
                 list_hold.append(df['binary_wind'].iloc[i])
                 if "Failure"  in list_hold:
                     Go_No_GO.append('Fail')
                 if 'Caution' in list_hold and "Fail" not in list_hold:
                     Go_No_GO.append('Caution')
                 else:
                     Go_No_GO.append('Pass')

            df['Go_No_Go'] = Go_No_GO
            print(df)
            color_discrete_map = {'Pass': '#40da16','Caution':'#FFC300', 'Fail': '#da1616', 'Index': '#2a46f5'}
            df_graph = df[['node', 'lat', 'lng', 'Go_No_Go']]
            frames = [df_graph, dfkml]
            df_graph = pd.concat(frames)
            print(df_graph)
            fig = px.bar(df, x="node", y="temp",
                         hover_data=["temp"], color="binary_temp", color_discrete_map=color_discrete_map
                         )

            fig.update_layout(
                plot_bgcolor=colors['background'],
                paper_bgcolor=colors['background'],
                font_color=colors['text']

            )
            fig2 = px.bar(df, x="node", y="wind_speed",
                          hover_data=["wind_speed"], color="binary_wind", color_discrete_map=color_discrete_map
                          )
            # fig = px.bar(df, x="node", y="temp", color="node", barmode="group")

            fig2.update_layout(
                plot_bgcolor=colors['background'],
                paper_bgcolor=colors['background'],
                font_color=colors['text']
            )

            fig3 = px.bar(df, x="node", y="rain_1",
                          hover_data=["rain_1"], color="binary_rain", color_discrete_map=color_discrete_map
                          )
            # fig = px.bar(df, x="node", y="temp", color="node", barmode="group")

            fig3.update_layout(
                plot_bgcolor=colors['background'],
                paper_bgcolor=colors['background'],
                font_color=colors['text']
            )

            fig4 = px.scatter_mapbox(df_graph, lat="lat", lon="lng", hover_name="node",
                                     color="Go_No_Go", color_discrete_map=color_discrete_map, zoom=9, height=600)

            fig4.update_layout(mapbox_style="open-street-map")
            fig4.update_layout(margin={"r": 0, "t": 25, "l": 108, "b": 75})
            fig4.update_layout(
                plot_bgcolor=colors['background'],
                paper_bgcolor=colors['background'],
                font_color=colors['text']
            )

            app.layout = html.Div(style={'backgroundColor': colors['background']}, children=[
                html.H1(
                    children='Airogistic Pre-Flight Check',
                    style={
                        'textAlign': 'center',
                        'color': colors['text']
                    }
                ),
                html.H1(
                    children=check,
                    style={
                        'textAlign': 'center',
                        'color': color_check
                    }
                ),

                html.Div(children=node_fail, style={
                    'textAlign': 'center',
                    'color': color_check
                }),

                dcc.Graph(
                    id='example-graph-1',
                    figure=fig
                ),
                dcc.Graph(
                    id='example-graph-2',
                    figure=fig2
                )
                ,
                dcc.Graph(
                    id='example-graph-3',
                    figure=fig3
                )
                ,
                dcc.Graph(
                    id='example-graph-4',
                    figure=fig4
                )
            ])

            if __name__ == '__main__':
                app.run_server(debug=False)


#############################################################################################################
class PageOne(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

class PageTwo(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)


print("***************************************************************************")
print("Flight Data Dashboard 1.0 (beta) Arogistics \nBrought to you by alittleie and Texas State University")
print("\nEmail questions and concerns to:\na.little.ie@gmail.com")
print("***************************************************************************")
app = holdy_boi()
separator = Frame(height=2, bd=1, relief=SUNKEN)
separator.pack(fill=X, padx=5, pady=5)
app.geometry("300x300")
app.title('Input KML Flight Path')
app.mainloop()
